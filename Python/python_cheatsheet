The following is a list of commonly used string methods:

  string.upper(): returns a copy of the string with all the characters in uppercase.
  string.lower(): returns a copy of the string with all the characters in lowercase.
  string.count(substring): returns number of occurrences of substring in string.
  string.split(char): returns a list of values where string is split at the given character. Without a parameter the default split is at every space.
  string.find(substring): returns the index of the start of the first occurrence of substring within string.
  string.isalnum(): returns boolean depending on whether the string's length is > 0 and all characters are alphanumeric (letters and numbers only). Strings that include spaces and punctuation will return False for this method. Similar methods include .isalpha(), .isdigit(), .islower(), .isupper(), and so on. All return booleans.
  string.join(list): returns a string that is all strings within our set (in this case a list) concatenated.
  string.endswith(substring): returns a boolean based upon whether the last characters of string match substring.

Some built-in functions for sequences:

  max(sequence) returns the largest value in the sequence
  sum(sequence) return the sum of all values in sequence
  map(function, sequence) applies the function to every item in the sequence you pass in. Returns a list of the results.
  min(sequence) returns the lowest value in a sequence.
  sorted(sequence) returns a sorted sequence

Python includes the following standalone functions for dictionaries:

  len() - give the total length of the dictionary.
  str() - produces a string representation of a dictionary.
  type() - returns the type of the passed variable. If passed variable is a dictionary, it will then return a dictionary type.

Python includes the following dictionary methods (either dict.method(yourDictionary) or yourDictionary.method() will work):

  .clear() - removes all elements from the dictionary
  .copy() - returns a shallow copy dictionary
  .fromkeys(sequence, [value]) - create a new dictionary with keys from sequence and values set to value.
  .get(key, default=None) - for key key, returns value or default if key is not in dictionary.
  .items() - returns a view object of dictionary's (key, value) tuple pairs.
  .keys() - return a view object of dictionary keys.
  .pop(key) - returns the value associated with the key and removes the key-value pair from the dictionary.
  .setdefault(key, default=None) - similar to get(), but will set dict[key]=default if key is not already in dictionary.
  .update(dict2) - adds dictionary dict2's key-values pairs to an existing dictionary.
  .values() - returns a view object of dictionary values.
  -----------
  EXAMPLES
    capitals = {"svk":"Bratislava","deu":"Berlin", "dnk":"Copenhagen"}
    # creating a new key/value pair
    capitals["abc"] = "New Country" 
    # updating
    capitals["abc"] = "ABC Country"
    #to print all keys
    for data in capitals:
      print(data)
    #another way to print all keys
    for key in capitals.keys():
      print(key)
    #to print the values
    for val in capitals.values():
      print(val)
    #to print all keys and values
    for key, val in capitals.items():
      print(key, " = ", val)

https://www.linuxtopia.org/online_books/programming_books/python_programming/python_ch14s07.html



// javascript code below!  
var arr = [1,3,5,7];
var temp = arr[0];
arr[0] = arr[1];
arr[1] = temp;

If this code looks like a lot of work for a simple swap, good news! Python gives you a little bit prettier way to do the same swap.

# python code below!
arr = [1,3,5,7]
arr[0], arr[1] = arr[1], arr[0]
